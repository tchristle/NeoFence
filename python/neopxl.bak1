import socket
import time
#import matplotlib.pyplot as plt
import numpy as np

## apply pixel addresses to fence columns
def addr2col():
    col[0]=range(300,354+1)    
    col[1]=range(417,363+1,-1)
    col[2]=range(426,479+1)
    col[3]=range(544,490,-1)
    col[4]=range(553,609)
    col[5]=range(674,620,-1)
    col[6]=range(682,735)
    col[7]=range(801,746,-1)
    col[8]=range(808,863)
    col[9]=range(925,872,-1)
    col[10]=range(934,988)
    col[11]=range(1050,997,-1)
    col[12]=range(1060,1114)
    col[13]=range(1176,1124,-1)
    col[14]=range(1186,1239)
    col[15]=range(1304,1250,-1)
    col[16]=range(1316,1367)
    col[17]=range(1427,1377,-1)
    col[18]=range(1440,1493)
    col[19]=range(1551,1501,-1)
    col[20]=range(1564,1616)
    col[21]=range(1676,1625,-1)
    col[22]=range(1687,1740)
    col[23]=range(1804,1751,-1)
    col[24]=range(1816,1866)
    col[25]=range(1928,1876,-1)
    col[26]=range(1938,1993)
    col[27]=range(2056,2004,-1)
    col[28]=range(2065,2090)+range(274,300)
    col[29]=range(211,264)

## send byte array to all fence strips
## to populate fence with color array: s2f(f2ba())
def s2f(sba):
    x=0
    for i in sf:
        a=s.sendto(sba[900*x:900*(x+1)], (i, UDP_PORT))
        x=x+1
    
## create bytearray from populated fence[] array
def f2ba():
    x=y=0
    fba=bytearray(300*len(sf)*3-1)
    for c in col:
        for r in c:
            #print "DEBUG:r,x,y=",r,x,y
            fba[r*3+0]=npr[fence[x][y]][0] #R
            fba[r*3+1]=npr[fence[x][y]][1] #G
            fba[r*3+2]=npr[fence[x][y]][2] #B
            y=y+1
            if y==h:
                y=0
        x=x+1
    return fba

## strip to byte array
def st2ba(strp):
    ba=bytearray()
    for i in range(len(strp)):
        ba.append(npr3[strp[i]][0])
        ba.append(npr3[strp[i]][1])
        ba.append(npr3[strp[i]][2])
    return ba

def show():
    s2f(f2ba())
    #showtop()

## show top strip pattern
def showtop():
    tba=bytearray(len(top)*3)
    for p in range(len(top)):
        tba[p*3+0]=npr[top[p]][0]#R
        tba[p*3+1]=npr[top[p]][1]#G
        tba[p*3+2]=npr[top[p]][2]#B
    a=s.sendto(tba, (sf[0], UDP_PORT))

def rotL(arr):
    arr=arr[-3:]+arr[:-3]
    return arr

def rotR(arr):
    arr=arr[3:]+arr[0:3]
    return arr

## apply single to entire fence
def scfence(c):
    for x in range(0,h):
        for y in range (0,w):
            fence[y][x]=c
    s2f(f2ba())
    return 0

## turn off all
def off():
    s2f(bytearray(len(sf)*300*3))    

## set fence array to zeros
def fclr():
    scfence(len(npr)-1)

## apply color to single fence bar
def colbar(x,c):
    for i in range(0,h):
        fence[x][i]=c
        
## apply color to single row across all bars
def colrow(y,c):
    for i in range(0,w):
        fence[i][y]=c

## apply color to single pixel
def colpix(x,y,c):
    fence[x][y]=c

## draw rectangle
def rect(x,y,l,h,c):
	for i in range(x,l):
		fence[i][y]=c #top
		fence[i][y+h]=c #bottom
	for i in range(y,h):
		fence[x][i]=c #left
		fence[x+l][i]=c #right

## cycle rainbow patter across bars left ot  right
def ranbar(y,a,b,s):
    c=0
    while 1:
        for x in range(0,30):
            colbar(x,c)
            show()
            time.sleep(s)
            c=c+y
            if c>b:
                c=a

def boxxy(s):
    c=0
    y=0
    while 1:
        for m in range(w):
            for n in range(h):
                c=(abs(n-15)+abs(m-26))*18+y
                if c>767:
                    c=c-767
                if c>767:
                    c=c-767
                y=y+1
                if y==766:
                    y=0
                fence[m][n]=c
                #print c
        show()
        time.sleep(s)

def rainbow_fence():
    c=0
    for i in range(0,len(fence)):
        for j in range(0,len(fence[i])):
            fence[i][j]=c
            c=c+1
            if c == 768:
                c=0
    
###---------------------------------------------------------------------###    

UDP_PORT = 5006
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

c = np.arange(0,128)
ncosi = 64+64*np.cos(c*np.pi/127)
cosi = 64+64*np.cos(c*np.pi/127-np.pi)
high=np.ones(128)*128
low=np.zeros(128)
#plt.plot(c,cosi)
#plt.show()

## define rainbow to color array
brt=0.5
npr=[]
r=g=b= 0
for i in range(0,128):
    r=128
    g=int(cosi[i])
    b=0
    npr.append((r,g,b))
    #print i, npr[i]
for i in range(128,256):
    r=int(ncosi[i-128])
    g=128
    b=0
    npr.append((r,g,b))
    #print i, npr[i]
for i in range(256,384):
    r=0
    g=128
    b=int(cosi[i-256])
    npr.append((r,g,b))
    #print i, npr[i]
for i in range(384,512):
    r=0
    g=int(ncosi[i-384])
    b=128
    npr.append((r,g,b))
    #print i, npr[i]
for i in range(512,640):
    r=int(cosi[i-512])
    g=0
    b=128
    npr.append((r,g,b))
    #print i, npr[i]
for i in range(640,768):
    r=128
    g=0
    b=int(ncosi[i-640])
    npr.append((r,g,b))
    #print i, npr[i]
npr[0]=((0,0,0))
npr.append((128,128,128))
#npr.append((0,0,0))

npr2=[]
for x in npr:
    r=int(x[0]*0.5)
    g=int(x[1]*0.5)
    b=int(x[2]*0.5)
    npr2.append((r,g,b))

npr3=[]
for x in range(128):
    r=128-x
    g=x
    b=0
    npr3.append((r,g,b))
for x in range(128):
    r=0
    g=128-x
    b=x
    npr3.append((r,g,b))    
for x in range(128):
    r=x
    g=0
    b=128-x
    npr3.append((r,g,b))
print len(npr3)
    
red=0
orange = 127
green = 255
yellow = 383
blue = 511
indigo = 639

sf=[]
sf.append('192.168.1.30')
sf.append('192.168.1.32')
sf.append('192.168.1.34')
sf.append('192.168.1.31')
sf.append('192.168.1.33')
sf.append('192.168.1.35')
sf.append('192.168.1.39')
sf.append('192.168.1.14')
test='192.168.1.14'

## define fence array with w=columns and h=pixels
## any value applied is a color from npr[], npr[-1] is off and npr[-2] is white
w, h = 30, 56
fence = [[0 for x in range(h)] for y in range(w)]
## define pixel addresses for each column. top to bottom
col=[[0 for x in range(h)] for y in range(w)]
## apply column adresses
addr2col()
## define top strip
top=range(205)
## define array for test strip
ts = range(300)

off()
fclr()
x=0
y=0
c=0
'''
while 1:
    fclr()
    colpix(x,y,c)
    y=y+1
    c=c+1
    if c==768:
        c=0
    if y==55:
        y=0
        x=x+1
        if x==29:
            x=0
    print x, ' ', y
    show()
    time.sleep(0.05)
'''
